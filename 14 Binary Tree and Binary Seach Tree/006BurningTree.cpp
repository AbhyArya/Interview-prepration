#include<bits/stdc++.h>
using namespace std;

// GFG - Burning Tree

struct Node { // This generated by me to remove error in code
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
class Solution {
    void dfs(Node* root, Node* parent,Node* &start, int target, map<Node*,Node*> &parents){
        if(!root)
            return;
        parents[root]=parent;
        if(root->data==target){
            start = root;
        }
        dfs(root->left,root,start,target,parents);
        dfs(root->right,root,start,target,parents);
    }
  public:
    int minTime(Node* root, int target) {
        Node* start = NULL;
        map<Node*,Node*> parents;
        dfs(root, new Node(-1),start, target, parents);
        set<Node*> st;
        int ans = 0;
        queue<Node*> q;
        q.push(start);
        while(!q.empty()){
            int size = q.size();
            bool isBurned = false;
            for(int i=0; i<size; i++){
                auto temp = q.front();
                q.pop();
                if(temp->left && st.find(temp->left)==st.end()){
                    q.push(temp->left);
                    st.insert(temp->left);
                    isBurned = true;
                }
                if(temp->right && st.find(temp->right)==st.end()){
                    q.push(temp->right);
                    st.insert(temp->right);
                    isBurned = true;
                }
                if(parents[temp] && parents[temp]->data!=-1 && st.find(parents[temp])==st.end()){
                    q.push(parents[temp]);
                    st.insert(parents[temp]);
                    isBurned = true;
                }
            }
            if(isBurned)
                ans++;
        }
        return ans;
    }
};